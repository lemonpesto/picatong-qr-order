<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>주문 내역</title>
    <link rel="stylesheet" href="/admin.css" />
    <script src="https://kit.fontawesome.com/a3ff865f92.js" crossorigin="anonymous"></script>
  </head>
  <body>
    <%- include('./partial/sidebar') %>

    <div class="orders-page">
      <!-- 기존 server-tabs 재활용 -->
      <div class="table-filter">
        <button class="filter-btn active" data-table="all">전체</button>
        <% for (let i = 1; i <= tableNum; i++) { %>
        <button class="filter-btn" data-table="<%= i %>">T<%= i %></button>
        <% } %>
      </div>

      <div class="order-list">
        <% orders.forEach(order => { %>
        <div class="order-card" data-table="<%= order.tableNum %>" data-id="<%= order._id %>">
          <div class="order-header">
            <div class="left-header">
              <span class="table-num">T<%= order.tableNum %></span>
              <span class="time"> <%= new Date(order.requestedAt) .toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', second: '2-digit' }) %> </span>
            </div>
            <div class="right-header">
              <span class="order-status <%= order.served ? 'status-served' : 'status-pending' %>">
                <% if (!order.paid) { %> 송금확인 전 <% } else if (!order.completed) { %> 조리 중 <% } else if (!order.served) { %> 서빙 중 <% } else { %> 서빙 완료 <% } %>
              </span>
            </div>
          </div>

          <div class="order-items">
            <% order.items.forEach(item => { %>
            <div class="order-item">
              <span class="item-name"> <%= item.menuName %> x<%= item.qty %> </span>
              <% if (item.comment) { %>
              <p class="subtext comment"><%= item.comment %></p>
              <% } %>
              <span class="item-price"> <%= (item.price * item.qty).toLocaleString() %>원 </span>
            </div>
            <% }) %>
          </div>

          <div class="order-footer">
            <span>합계</span>
            <span class="order-total"> <%= order.total.toLocaleString() %>원 </span>
          </div>
        </div>
        <% }) %>

        <div id="orders-notice" class="inline-action <%= orders.length > 0 ? 'hidden' : '' %>">
          <p>주문 내역이 없습니다</p>
        </div>
      </div>
    </div>

    <div id="toast" class="toast-msg"></div>
    <script src="/toast.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      (function () {
        const socket = io();
        const filterBtns = ".filter-btn";
        const orderList = document.querySelector(".order-list");
        const notice = document.getElementById("orders-notice");
        const $$ = (sel) => Array.from(document.querySelectorAll(sel));

        socket.on("connect", () => {
          // 기존 주문 카드들 모두 room 에 join
          document.querySelectorAll(".order-card").forEach((card) => {
            socket.emit("joinOrderRoom", card.dataset.id);
          });
        });

        // 주문 카드 생성 함수
        function createOrderCard(o) {
          const statusText = !o.paid ? "송금확인 전" : !o.completed ? "조리 중" : !o.served ? "서빙 중" : "서빙 완료";

          const badgeClass = o.served ? "status-served" : "status-pending";

          const c = document.createElement("div");
          c.className = "order-card";
          c.dataset.table = o.tableNum;
          c.dataset.id = o._id;
          c.innerHTML = `
            <div class="order-header">
              <div class="left-header">
                <span class="table-num">T${o.tableNum}</span>
                <span class="time">${new Date(o.requestedAt).toLocaleTimeString("ko-KR", {
                  hour: "2-digit",
                  minute: "2-digit",
                  second: "2-digit",
                })}</span>
              </div>
              <div class="right-header">
                <span class="order-status ${o.served ? "status-served" : "status-pending"}">${statusText}</span>
              </div>
            </div>
            <div class="order-items">
              ${o.items
                .map(
                  (item) => `
                <div class="order-item">
                  <span class="item-name">
                    ${item.menuName} x${item.qty}
                  </span>
                  <span class="item-price">
                    ${(item.price * item.qty).toLocaleString()}원
                  </span>
                </div>
              `
                )
                .join("")}
            </div>
            <div class="order-footer">
              <span>합계</span>
              <span class="order-total">
                ${o.total.toLocaleString()}원
              </span>
            </div>`;
          return c;
        }

        // --- 테이블 필터링 ---
        $$(filterBtns).forEach((btn) => {
          btn.addEventListener("click", () => {
            const table = btn.dataset.table;
            if (table === "all") {
              $$(filterBtns).forEach((b) => b.classList.remove("active"));
              btn.classList.add("active");
            } else {
              document.querySelector('[data-table="all"]').classList.remove("active");
              btn.classList.toggle("active");
            }
            const activeTables = new Set(
              $$(filterBtns)
                .filter((b) => b.classList.contains("active"))
                .map((b) => b.dataset.table)
                .filter((t) => t !== "all")
            );
            $$(".order-card").forEach((card) => {
              card.style.display = activeTables.size === 0 || activeTables.has(card.dataset.table) ? "" : "none";
            });
          });
        });

        // 서버에서 최신 주문을 가져와 화면에 다시 그려주는 함수
        async function refreshOrderList() {
          try {
            const res = await fetch("/admin/orders/data");
            const { orders } = await res.json();
            // 1) 기존 리스트 비우기
            orderList.innerHTML = "";
            // 2) 데이터 없으면 안내 문구만
            if (!orders.length) {
              notice.classList.remove("hidden");
            } else {
              notice.classList.add("hidden");
              // 3) 카드 생성 & 삽입
              orders.forEach((o) => orderList.append(createOrderCard(o)));
            }
            // 4) 방별 join (실시간 하위 이벤트 수신용)
            orders.forEach((o) => socket.emit("joinOrderRoom", o._id));
          } catch (err) {
            console.error("주문 목록 로드 실패", err);
          }
        }

        // 최초 한 번 로드
        refreshOrderList();

        // orders 컬렉션 실시간 변화 이벤트에 대해 refresh 호출
        ["newOrder", "orderPaid", "orderCooked", "orderServed", "orderCancelled"].forEach((evt) => socket.on(evt, refreshOrderList));
      })();
    </script>
  </body>
</html>
